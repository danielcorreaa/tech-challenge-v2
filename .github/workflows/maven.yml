# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main","release", "develop"]
  pull_request:
    branches: [ "main","release", "develop"]

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:  
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'          
          cache: maven
      - run: mvn test --file pom.xml   
      
  sonar:
    needs: unit-test
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=danielcorreaa_tech-challenge-v2

  build:
    runs-on: ubuntu-latest  
    needs: sonar
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'          
          cache: maven
      - run: mvn clean install --file pom.xml 

  docker-pull-image:
    needs: build
    runs-on: ubuntu-latest
    steps:
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    - name: Build project
      run: mvn clean install -DskipTests --file pom.xml
      
    - uses: actions/checkout@v3
    - name: Docker Setup Buildx  
      uses: docker/setup-buildx-action@v3.0.0
    - name: Docker Login    
      uses: docker/login-action@v3.0.0
      with:
        # Username used to log against the Docker registry
        username: daniel36
        # Password or personal access token used to log against the Docker registry
        password: ${{ secrets.PASSWORD_DOCKER_HUB }}
    - name: Build and push Docker images     
      uses: docker/build-push-action@v5.0.0
      with:
        context: .
        # Path to the Dockerfile
        file:  ./Dockerfile        
        push: true       
        tags: daniel36/tech-challenge:${{github.run_number}}
        

  Deploy_EKS-Dev:   
     needs: docker-pull-image 
     if: github.ref == 'refs/heads/develop'  
     uses: ./.github/workflows/terraform-dev.yml    
     secrets: inherit
  
  Deploy_EKS-Release:  
     needs: docker-pull-image 
     if: github.ref == 'refs/heads/release'  
     uses: ./.github/workflows/terraform-qa.yml    
     secrets: inherit

  Deploy_EKS-Prod: 
     needs: docker-pull-image  
     if: github.ref == 'refs/heads/main'  
     uses: ./.github/workflows/terraform-prd.yml    
     secrets: inherit
    

    
